name: Release

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
      release_tag:
        description: 'Release tag (optional, overrides automatic versioning)'
        required: false
        type: string
      release_notes:
        description: 'Release notes (optional)'
        required: false
        type: string
  push:
    branches:
      - release
      - main

permissions:
  contents: write
  pull-requests: write

env:
  NODE_VERSION: "20"

jobs:
  release:
    name: 🚀 Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get current version
        id: current_version
        run: |
          # Get the latest tag or default to 0.0.0
          CURRENT_VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "0.0.0")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Determine next version
        id: next_version
        run: |
          # If release_tag input is provided, use it
          if [[ -n "${{ inputs.release_tag }}" ]]; then
            NEXT_VERSION="${{ inputs.release_tag }}"
          else
            # Determine version bump based on input or branch
            if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
              BUMP_TYPE="${{ inputs.version_bump }}"
            elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
              BUMP_TYPE="minor"
            else
              BUMP_TYPE="patch"
            fi
            
            # Calculate next version
            NEXT_VERSION=$(npx semver ${{ steps.current_version.outputs.current_version }} -i $BUMP_TYPE)
          fi
          
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "Next version: $NEXT_VERSION"

      - name: Update version in package.json
        run: |
          npm version ${{ steps.next_version.outputs.next_version }} --no-git-tag-version
          git add package.json

      - name: Generate version info
        run: |
          npm run version
          git add src/version.json

      - name: Commit version updates
        run: |
          git commit -m "chore(release): update version to ${{ steps.next_version.outputs.next_version }}"

      - name: Create and push tag
        run: |
          git tag -a "v${{ steps.next_version.outputs.next_version }}" -m "Release version ${{ steps.next_version.outputs.next_version }}"
          git push origin "v${{ steps.next_version.outputs.next_version }}"

      - name: Push version updates
        run: |
          git push

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.next_version.outputs.next_version }}
          release_name: Release v${{ steps.next_version.outputs.next_version }}
          body: |
            ## Release v${{ steps.next_version.outputs.next_version }}
            
            ${{ inputs.release_notes || 'Automated release generated by GitHub Actions.' }}
            
            ### 🔧 Changes
            - Version updated to ${{ steps.next_version.outputs.next_version }}
            
            ### 📦 Version Information
            ```json
            ${{ toJson(steps.version_info.outputs) }}
            ```
          draft: false
          prerelease: false

      - name: 📝 Write Release Summary
        if: always()
        run: |
          echo "## 🚀 Release Summary" >> $GITHUB_STEP_SUMMARY
          if [ "${{ job.status }}" == "success" ]; then
            echo "- Status: ✅ Release completed successfully" >> $GITHUB_STEP_SUMMARY
            echo "- Tag created: \`v${{ steps.next_version.outputs.next_version }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- Release notes: [View Release](https://github.com/${{ github.repository }}/releases/tag/v${{ steps.next_version.outputs.next_version }})" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Status: ❌ Release failed" >> $GITHUB_STEP_SUMMARY
          fi