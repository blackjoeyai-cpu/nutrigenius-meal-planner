name: Version Management

on:
  push:
    branches:
      - main
      - release/*
  pull_request:
    branches:
      - main
      - release/*

permissions:
  contents: write
  pull-requests: write

env:
  NODE_VERSION: "20"

jobs:
  version:
    name: üè∑Ô∏è Version Management
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get current version
        id: current_version
        run: |
          # Get the latest tag or default to 0.0.0
          CURRENT_VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "0.0.0")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Determine next version
        id: next_version
        run: |
          # For pull requests, we don't create new tags
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "Skipping version bump for pull request"
            echo "next_version=${{ steps.current_version.outputs.current_version }}" >> $GITHUB_OUTPUT
            exit 0
          fi

          # For pushes to main/release branches, determine next version based on commits
          # Get commit messages since last tag
          COMMITS=$(git log --oneline $(git describe --tags --abbrev=0 2>/dev/null || echo "HEAD~10")..HEAD)

          # Determine version bump type based on commit messages
          if echo "$COMMITS" | grep -qE "(feat|feature)"; then
            # Minor version bump for features
            NEXT_VERSION=$(npx semver ${{ steps.current_version.outputs.current_version }} -i minor)
          elif echo "$COMMITS" | grep -qE "(fix|bugfix)"; then
            # Patch version bump for fixes
            NEXT_VERSION=$(npx semver ${{ steps.current_version.outputs.current_version }} -i patch)
          else
            # Default to patch bump
            NEXT_VERSION=$(npx semver ${{ steps.current_version.outputs.current_version }} -i patch)
          fi

          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "Next version: $NEXT_VERSION"

      - name: Create new version tag
        if: github.event_name != 'pull_request' && steps.next_version.outputs.next_version != steps.current_version.outputs.current_version
        run: |
          # Create and push new tag
          git tag -a "v${{ steps.next_version.outputs.next_version }}" -m "Release version ${{ steps.next_version.outputs.next_version }}"
          git push origin "v${{ steps.next_version.outputs.next_version }}"

          # Also update the version in package.json
          npm version ${{ steps.next_version.outputs.next_version }} --no-git-tag-version
          git add package.json
          git commit -m "chore: update version to ${{ steps.next_version.outputs.next_version }}"
          git push

      - name: Generate version info
        run: |
          # Run our version generation script
          npm run version

          # Show generated version info
          cat src/version.json

      - name: Read version info
        id: version_info
        run: |
          VERSION_INFO=$(cat src/version.json | tr -d '\n')
          echo "version_info=$VERSION_INFO" >> $GITHUB_OUTPUT

      - name: Update PR with version info
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: version-info
          message: |
            ## üè∑Ô∏è Version Information

            Current version: `${{ steps.current_version.outputs.current_version }}`

            This PR will result in version: `${{ steps.next_version.outputs.next_version }}` (if merged)

            <details>
            <summary>Version Details</summary>

            ```json
            ${{ steps.version_info.outputs.version_info }}
            ```

            </details>

      - name: Create GitHub Release
        if: github.event_name != 'pull_request' && steps.next_version.outputs.next_version != steps.current_version.outputs.current_version
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.next_version.outputs.next_version }}
          release_name: Release v${{ steps.next_version.outputs.next_version }}
          body: |
            ## Release v${{ steps.next_version.outputs.next_version }}

            Automated release generated by GitHub Actions.

            ### Changes

            ${{ github.event.head_commit.message }}

            ### Version Information

            ```json
            ${{ steps.version_info.outputs.version_info }}
            ```
          draft: false
          prerelease: false

      - name: üìù Write Version Summary
        if: always()
        run: |
          echo "## üè∑Ô∏è Version Management Summary" >> $GITHUB_STEP_SUMMARY
          if [ "${{ job.status }}" == "success" ]; then
            echo "- Status: ‚úÖ Version management completed" >> $GITHUB_STEP_SUMMARY
            echo "- Current version: \`${{ steps.current_version.outputs.current_version }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- Next version: \`${{ steps.next_version.outputs.next_version }}\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Status: ‚ùå Version management failed" >> $GITHUB_STEP_SUMMARY
          fi
